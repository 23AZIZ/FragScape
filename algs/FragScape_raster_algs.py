# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FragScape
                                 A QGIS plugin
 Computes effective mesh size
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by IRSTEA
        email                : mathieu.chailloux@irstea.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm)                       
                       
def tr(self, string):
    return QCoreApplication.translate('Processing', string) 

class RasterMeff(QgsProcessingAlgorithm):

    ALG_NAME = "rasterMeff"
    INPUT = "INPUT"
    CLASS = "CLASS"
        
    def createInstance(self):
        return RasterMeff()
        
    def name(self):
        return self.ALG_NAME
        
    def displayName(self):
        return self.tr("Raster Effective Mesh Size")
        
    def shortHelpString(self):
        return self.tr("Computes effective mesh size on a raster layer")

    def initAlgorithm(self, config):
        '''Here we define the inputs and output of the algorithm, along
        with some other properties'''
        self.addParameter(QgsProcessingParameterRasterLayer(self.INPUT, "Input raster layer", optional=False))
        self.addParameter(QgsProcessingParameterNumber(self.CLASS, "Choose Landscape Class", type=QgsProcessingParameterNumber.Integer, defaultValue=1))
        self.addParameter(QgsProcessingParameterRasterDestination(self.OUTPUT_RASTER, "Result output"))  
        self.addOutput(QgsProcessingParameterRasterDestination(self.OUTPUT_RASTER, "Result output"))
        
    def processAlgorithm(self, parameters, context, feedback):
        '''Here is where the processing itself takes place'''
        
        # Retrieve the values of the parameters entered by the user
        input = 
        inputFilename = self.parameterAsRasterLayer(parameters, self.LAND, context).source()
        cl = self.parameterAsInt(parameters, self.LC_CLASS, context)
        output = self.parameterAsOutputLayer(parameters, self.OUTPUT_RASTER, context)        
                
        # Processing
        nodata = lcs.f_returnNoDataValue(str(inputFilename)) # Get Nodata-value
        classes, array = lcs.f_landcover(str(inputFilename)) # get classes and array

        # Check for nodata value
        if nodata == None:
            ln = str(path.basename(inputFilename))
            raise QgsProcessingException("The layer %s has no valid nodata value (no number)!" % (ln))

        # Needed to see if class in inside raster
        if cl not in classes:
            ln = str(path.basename(inputFilename))
            raise QgsProcessingException("The layer %s has no cells with value %s !" % (ln,cl))
            
        # Build 
        cl_array = numpy.copy(array)
        cl_array[cl_array!=int(cl)] = 0

        struct = scipy.ndimage.generate_binary_structure(2,2)
        results, numpatches = ndimage.label(cl_array,struct) 
    
        # Create the output layer 
        func.exportRaster(results,inputFilename,output)
        return {self.OUTPUT_RASTER: output}