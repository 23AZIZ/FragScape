# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MeffDialog
                                 A QGIS plugin
 This plugin computes mesh effective size
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-05
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Mathieu Chailloux
        email                : mathieu@chailloux.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.core import QgsMapLayerProxyModel
from qgis.gui import QgsFileWidget
from processing import QgsProcessingUtils

from .shared import utils, abstract_model, qgsUtils
from . import params, fragm

class ReportingModel(abstract_model.DictModel):

    def __init__(self):
        self.parser_name = "Reporting"
        self.layer = None
        self.outLayer = None
        self.init_fields = ["meff"]
        self.fields = self.init_fields
        super().__init__(self,self.fields)
        #super().__init__(self,self.fields)
                
    def setOutLayer(self,layer):
        self.outLayer = layer
        
    def mkIntersectionLayer(self):
        pass
        
    def computeIntersections(self):
        landuseFragmPath = fragm.fragmModel.getFinalLayer()
        landuseFragmlayer = qgsUtils.loadVectorLayer(landuseFragmPath)
        #reporting_layer = qgsUtils.loadVectorLayer(self.layer)
        reporting_layer = self.layer
        intersection_layer = qgsUtils.createLayerFromExisting(reporting_layer,"reportingIntersection.gpkg")
        utils.debug("fields = " + str(intersection_layer.fields().names()))
        for f in landuseFragmlayer.getFeatures():
            f_geom = f.geometry()
            f_area = f_geom.area()
            patches_area_sum = 0
            for report_feat in reporting_layer.getFeatures():
                report_geom = report_feat.geometry()
                report_area = report_geom.area()
                if f_geom.intersects(report_geom):
                    intersection = f_geom.intersection(report_geom)
                    intersection_area = intersection.area()
                    f_area2 = pow(f_area,2)
                    intersection_area2 = pow(intersection_area,2)
                    f_area_cbc = intersection_area * (f_area - intersection_area)
                    patches_area_sum += f_area_cbc
            coh = patches_area_sum / f_area
            utils.debug("coh = " + str(coh))
            
    def runReporting(self):
        self.computeIntersections()
        
    def toXML(self,indent=" "):
        if not self.layer:
            utils.warn("No reporting layer selected")
            return ""
        layerRelPath = params.normalizePath(self.model.layer)
        modelParams = { "layer" : layerRelPath }
        xmlStr = super().toXML(indent,modelParams)
        return xmlStr
        

class ReportingConnector(abstract_model.AbstractConnector):

    
    def __init__(self,dlg):
        self.dlg = dlg
        self.parser_name = "Reporting"
        reportingModel = ReportingModel()
        super().__init__(reportingModel,self.dlg.resultsView)
        
    def initGui(self):
        self.dlg.reportingLayerCombo.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.dlg.reportingLayer.setFilter(qgsUtils.getVectorFilters())
        self.dlg.resultsOutLayer.setStorageMode(QgsFileWidget.SaveFile)
        self.dlg.resultsOutLayer.setFilter(qgsUtils.getVectorFilters())
        
    def connectComponents(self):
        super().connectComponents()
        self.dlg.reportingLayerCombo.layerChanged.connect(self.setLayer)
        self.dlg.reportingLayer.fileChanged.connect(self.loadLayer)
        self.dlg.resultsOutLayer.fileChanged.connect(self.model.setOutLayer)
        self.dlg.resultsRun.clicked.connect(self.model.runReporting)
        
    def setLayer(self,layer):
        utils.debug("setLayer " + str(layer.type))
        #self.dlg.reportingLayerCombo.setLayer(layer)
        self.model.layer = layer
    
    def loadLayer(self,path):
        utils.debug("loadLayer")
        loaded_layer = qgsUtils.loadVectorLayer(path,loadProject=True)
        self.dlg.reportingLayerCombo.setLayer(loaded_layer)
        #self.setLayer(loaded_layer)
   
    def fromXMLAttribs(self,attribs):
        attrib_fields = ["layer"]
        utils.checkFields(attrib_fields,attribs.keys())
        abs_layer = params.getOrigPath(attribs["layer"])
        self.loadLayer(abs_layer)
        #self.dlg.reportingLayerCombo.setField(attribs["field"])
        
    def fromXMLRoot(self,root):
        self.fromXMLAttribs(root.attrib)
        
    def toXML(self,indent=" "):
        return self.model.toXML()
        